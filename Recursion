#include<bits/stdc++.h>
using namespace std;

void subsequence(int ind, vector<int> &arr, vector<int> &ds, vector<vector<int>> &ans) {
    if(ind == arr.size()) {
        ans.push_back(ds) ;
        return ;
    }
    
    // Pick 
    ds.push_back(arr[ind]); 
    subsequence(ind+1, arr, ds, ans) ;
    ds.pop_back() ;
    
    // Not Pick
    subsequence(ind+1, arr, ds, ans) ;
}


int main() {
    // Write C++ code here
    vector<int> arr = {3,1,2}; 
    
    // Printing all Subsequences
    vector<int> ds ; 
    vector<vector<int>> ans ;
    subsequence(0, arr, ds, ans) ;
    
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << "[" << num << ",]" ; 
        }
        cout << "|" ; 
    }

    return 0;
}

Output: [3,][1,][2,]|[3,][1,]|[3,][2,]|[3,]|[1,][2,]|[1,]|[2,]||

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;

void subsequence(int ind, vector<int> &arr, int sum , vector<int> &ds, vector<vector<int>> &ans, int &count) {
    
    if(sum == 0) {
        ans.push_back(ds) ;
        count++ ;
        return ;
    }
    
    if(ind == arr.size()) {
        // ans.push_back(ds) ;
        return ;
    }
    
    // Pick 
    ds.push_back(arr[ind]); 
    subsequence(ind+1, arr, sum - arr[ind], ds, ans, count) ;
    ds.pop_back() ;
    
    // Not Pick
    subsequence(ind+1, arr, sum ,  ds, ans, count) ;
}


int main() {
    // Write C++ code here
    vector<int> arr = {3,1,2}; 
    int K = 5 ;
    int count = 0 ;
    
    // Printing all Subsequences
    vector<int> ds ; 
    vector<vector<int>> ans ;
    subsequence(0, arr, K ,  ds, ans, count) ;

    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num << ",";
        }
        cout << endl ;
    }
    cout << "Total Subsequence with sum " << K << ":" << count ;

    return 0;
}

Output: 3,2,
Total Subsequence with sum 5:1

==============================================================================================================================================================================================================
#include<bits/stdc++.h>
using namespace std;

void subsequence(int ind, vector<int> &arr, int &maxi, int sum  , vector<int> &ds, vector<vector<int>> &ans) {
    
    if(ind == arr.size()) {
        if(sum > maxi) {
            maxi = sum ;
            ans.push_back(ds) ;
        }
        return ;
    }
    
    // Pick 
    ds.push_back(arr[ind]); 
    subsequence(ind+1, arr, maxi, sum + arr[ind], ds, ans) ;
    ds.pop_back() ;
    
    // Not Pick
    subsequence(ind+1, arr, maxi, sum ,  ds, ans) ;
}


int main() {
    // Write C++ code here
    vector<int> arr = {3,1,2}; 
    int maxi = INT_MIN ;
    
    // Printing all Subsequences
    vector<int> ds ; 
    vector<vector<int>> ans ;
    subsequence(0, arr, maxi , 0 ,  ds, ans) ;
    
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num ; 
        }
        cout << endl ;
    }
    
    cout << "Max Value of Subsequence: " << maxi ; 


    return 0;
}

Output: 312
Max Value of Subsequence: 6

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include<bits/stdc++.h>
using namespace std;

void combSum(int ind, vector<int> &arr, int target, vector<int> &ds, vector<vector<int>> &ans ) {
    
    if(target == 0) {
        ans.push_back(ds) ;
        return ;
    }
    
    if(ind == arr.size()) {
        return ;
    }
    
    // Pick
    if(arr[ind] <= target) {
        ds.push_back(arr[ind]) ;
        combSum(ind , arr, target - arr[ind], ds, ans) ;
        ds.pop_back() ;
    }
    
    // Not Pick
    combSum(ind + 1, arr, target, ds, ans) ;
}

int main() {
    // Write C++ code here
    vector<int> arr = {2,3,6,7};
    int target = 7 ;
    
    vector<vector<int>> ans ;
    vector<int> ds ;
    
    combSum(0, arr, target, ds, ans) ;
    
    for(vector<int> nums: ans) {
        for(int num : nums) {
            cout << num ;
        }
        cout << "||" ;
    } 
    return 0;
}

Output: 223||7||

**************************************************************************************************************************************************************************************************************
#include<bits/stdc++.h>
using namespace std;

void combSumII(int ind, vector<int> &arr, int target, vector<int> &ds, set<vector<int>> &st ) {
    
    if(target == 0) {
        sort(ds.begin(), ds.end()) ;
        st.insert(ds) ;
        return ;
    }
    
    if(ind == arr.size()) {
        return ;
    }
    
    // Pick
    if(arr[ind] <= target) {
        ds.push_back(arr[ind]) ;
        combSumII(ind+1 , arr, target - arr[ind], ds, st) ;
        ds.pop_back() ;
    }
    
    // Not Pick
    combSumII(ind + 1, arr, target, ds, st) ;
}

int main() {
    // Write C++ code here
    vector<int> arr = {10,1,2,7,6,1,5};
    int target = 8 ;
    
    set<vector<int>> st; 
    vector<vector<int>> ans ;
    vector<int> ds ;
    
    combSumII(0, arr, target, ds, st) ;
    
    for(vector<int> nums : st) {
        ans.push_back(nums) ;
    }
    
    for(vector<int> nums: ans) {
        for(int num : nums) {
            cout << num ;
        }
        cout << endl ;
    } 
    return 0;
}

Output: 
116
125
17
26
