#include<bits/stdc++.h>
using namespace std;

void subsequence(int ind, vector<int> &arr, vector<int> &ds, vector<vector<int>> &ans) {
    if(ind == arr.size()) {
        ans.push_back(ds) ;
        return ;
    }
    
    // Pick 
    ds.push_back(arr[ind]); 
    subsequence(ind+1, arr, ds, ans) ;
    ds.pop_back() ;
    
    // Not Pick
    subsequence(ind+1, arr, ds, ans) ;
}


int main() {
    // Write C++ code here
    vector<int> arr = {3,1,2}; 
    
    // Printing all Subsequences
    vector<int> ds ; 
    vector<vector<int>> ans ;
    subsequence(0, arr, ds, ans) ;
    
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << "[" << num << ",]" ; 
        }
        cout << "|" ; 
    }

    return 0;
}

Output: [3,][1,][2,]|[3,][1,]|[3,][2,]|[3,]|[1,][2,]|[1,]|[2,]||

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;

void subsequence(int ind, vector<int> &arr, int sum , vector<int> &ds, vector<vector<int>> &ans, int &count) {
    
    if(sum == 0) {
        ans.push_back(ds) ;
        count++ ;
        return ;
    }
    
    if(ind == arr.size()) {
        // ans.push_back(ds) ;
        return ;
    }
    
    // Pick 
    ds.push_back(arr[ind]); 
    subsequence(ind+1, arr, sum - arr[ind], ds, ans, count) ;
    ds.pop_back() ;
    
    // Not Pick
    subsequence(ind+1, arr, sum ,  ds, ans, count) ;
}


int main() {
    // Write C++ code here
    vector<int> arr = {3,1,2}; 
    int K = 5 ;
    int count = 0 ;
    
    // Printing all Subsequences
    vector<int> ds ; 
    vector<vector<int>> ans ;
    subsequence(0, arr, K ,  ds, ans, count) ;

    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num << ",";
        }
        cout << endl ;
    }
    cout << "Total Subsequence with sum " << K << ":" << count ;

    return 0;
}

Output: 3,2,
Total Subsequence with sum 5:1

==============================================================================================================================================================================================================
#include<bits/stdc++.h>
using namespace std;

void subsequence(int ind, vector<int> &arr, int &maxi, int sum  , vector<int> &ds, vector<vector<int>> &ans) {
    
    if(ind == arr.size()) {
        if(sum > maxi) {
            maxi = sum ;
            ans.push_back(ds) ;
        }
        return ;
    }
    
    // Pick 
    ds.push_back(arr[ind]); 
    subsequence(ind+1, arr, maxi, sum + arr[ind], ds, ans) ;
    ds.pop_back() ;
    
    // Not Pick
    subsequence(ind+1, arr, maxi, sum ,  ds, ans) ;
}


int main() {
    // Write C++ code here
    vector<int> arr = {3,1,2}; 
    int maxi = INT_MIN ;
    
    // Printing all Subsequences
    vector<int> ds ; 
    vector<vector<int>> ans ;
    subsequence(0, arr, maxi , 0 ,  ds, ans) ;
    
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num ; 
        }
        cout << endl ;
    }
    
    cout << "Max Value of Subsequence: " << maxi ; 


    return 0;
}

Output: 312
Max Value of Subsequence: 6

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#include<bits/stdc++.h>
using namespace std;

void combSum(int ind, vector<int> &arr, int target, vector<int> &ds, vector<vector<int>> &ans ) {
    
    if(target == 0) {
        ans.push_back(ds) ;
        return ;
    }
    
    if(ind == arr.size()) {
        return ;
    }
    
    // Pick
    if(arr[ind] <= target) {
        ds.push_back(arr[ind]) ;
        combSum(ind , arr, target - arr[ind], ds, ans) ;
        ds.pop_back() ;
    }
    
    // Not Pick
    combSum(ind + 1, arr, target, ds, ans) ;
}

int main() {
    // Write C++ code here
    vector<int> arr = {2,3,6,7};
    int target = 7 ;
    
    vector<vector<int>> ans ;
    vector<int> ds ;
    
    combSum(0, arr, target, ds, ans) ;
    
    for(vector<int> nums: ans) {
        for(int num : nums) {
            cout << num ;
        }
        cout << "||" ;
    } 
    return 0;
}

Output: 223||7||

**************************************************************************************************************************************************************************************************************
#include<bits/stdc++.h>
using namespace std;
// Combination Sum -II using Set DS
void combSumII(int ind, vector<int> &arr, int target, vector<int> &ds, set<vector<int>> &st ) {
    
    if(target == 0) {
        sort(ds.begin(), ds.end()) ;
        st.insert(ds) ;
        return ;
    }
    
    if(ind == arr.size()) {
        return ;
    }
    
    // Pick
    if(arr[ind] <= target) {
        ds.push_back(arr[ind]) ;
        combSumII(ind+1 , arr, target - arr[ind], ds, st) ;
        ds.pop_back() ;
    }
    
    // Not Pick
    combSumII(ind + 1, arr, target, ds, st) ;
}

int main() {
    // Write C++ code here
    vector<int> arr = {10,1,2,7,6,1,5};
    int target = 8 ;
    
    set<vector<int>> st; 
    vector<vector<int>> ans ;
    vector<int> ds ;
    
    combSumII(0, arr, target, ds, st) ;
    
    for(vector<int> nums : st) {
        ans.push_back(nums) ;
    }
    
    for(vector<int> nums: ans) {
        for(int num : nums) {
            cout << num ;
        }
        cout << endl ;
    } 
    return 0;
}

Output: 
116
125
17
26

##############################################################################################################################################################################################################
#include<bits/stdc++.h>
using namespace std;
// CombSum - II : 2nd Approach, avoiding duplicates via for-loop based conditions.
void combSumII(int ind, vector<int> &arr, int target, vector<int> &ds, vector<vector<int>> &ans ) {
    
    if (target == 0) {
    ans.push_back(ds);
    return;
  }

  for (int i = ind; i < arr.size(); i++) {
    if (i > ind && arr[i] == arr[i - 1]) continue;
    if (arr[i] > target) break;
    ds.push_back(arr[i]);
    combSumII(i + 1, arr, target - arr[i], ds, ans);
    ds.pop_back();
  }
    
}

int main() {
    // Write C++ code here
    vector<int> arr = {10,1,2,7,6,1,5};
    int target = 8 ;
    
    vector<vector<int>> ans ;
    vector<int> ds ;
    
    sort(arr.begin(), arr.end()) ;
    combSumII(0, arr, target, ds, ans) ;

    for(vector<int> nums: ans) {
        for(int num : nums) {
            cout << num ;
        }
        cout << endl ;
    } 
    
    return 0;
}

______________________________________________________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;
void subSetSum(int ind, vector<int> &arr, int sum , vector<int> &store, vector<int> &ds, vector<vector<int>> &ans) {
    
    if(ind == arr.size()) {
        store.push_back(sum) ;
        ans.push_back(ds) ;
        return; 
    }
    
    // Pick
    ds.push_back(arr[ind]) ;
    subSetSum(ind+1, arr, sum + arr[ind], store, ds, ans) ;
    ds.pop_back() ;
    
    // Not Pick
    subSetSum(ind+1, arr, sum, store, ds, ans);
}

int main() {
    // Write C++ code here
    vector<int> arr = {3,1,2};
    
    vector<vector<int>> ans ;
    vector<int> ds , store;
    
    subSetSum(0, arr, 0,store, ds, ans) ;
    
    cout << "Sum Stored: ";
    for(int num : store) {
        cout << num << " " ;
    }
    
    cout << endl << "The SubSet: "; 
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num <<" " ;
        }
        cout << "||" ;
    }
    
    return 0;
} 

Output: Sum Stored: 6 4 5 3 3 1 2 0 
The SubSet: 3 1 2 ||3 1 ||3 2 ||3 ||1 2 ||1 ||2 ||||

``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
#include<bits/stdc++.h>
using namespace std;
// Subset Sum - II using Set DS
void subSetSum(int ind, vector<int> &arr, int sum , vector<int> &store, vector<int> &ds, set<vector<int>> &ans) {
    
    if(ind == arr.size()) {
        store.push_back(sum) ;
        sort(ds.begin(), ds.end());
        ans.insert(ds) ;
        return; 
    }
    
    // Pick
    ds.push_back(arr[ind]) ;
    subSetSum(ind+1, arr, sum + arr[ind], store, ds, ans) ;
    ds.pop_back() ;
    
    // Not Pick
    subSetSum(ind+1, arr, sum, store, ds, ans);
}

int main() {
    // Write C++ code here
    vector<int> arr = {1,2,2,};
    
    set<vector<int>> ans ;
    vector<int> ds , store;
    
    subSetSum(0, arr, 0,store, ds, ans) ;
    
    cout << "Sum Stored: ";
    for(int num : store) {
        cout << num << " " ;
    }
    
    cout << endl << "The SubSet: "; 
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num <<" " ;
        }
        cout << "||" ;
    }
    
    return 0;
}

Output: 
Sum Stored: 5 3 3 1 4 2 2 0 
The SubSet: ||1 ||1 2 ||1 2 2 ||2 ||2 2 ||

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#include<bits/stdc++.h>
using namespace std;
//SubSet Sum - II 2nd Approach, Avoiding duplicates via for-loop based condition
void subSetSum(int ind, vector<int> &arr, int sum , vector<int> &store, vector<int> &ds, vector<vector<int>> &ans) {
    
    store.push_back(sum) ;
    ans.push_back(ds) ;
    
    // Pick
    for(int i = ind ; i < arr.size() ; i++) {
        if(i != ind && arr[i] == arr[i-1]) continue ;
        ds.push_back(arr[i]) ;
        subSetSum(i+1, arr, sum + arr[i], store, ds, ans) ;
        ds.pop_back() ;
    }
}

int main() {
    // Write C++ code here
    vector<int> arr = {1,2,2};
    
    vector<vector<int>> ans ;
    ans.push_back({}) ;
    vector<int> ds , store;
    
    sort(arr.begin(), arr.end()) ;
    subSetSum(0, arr, 0,store, ds, ans) ;
    
    cout << "Sum Stored: ";
    for(int num : store) {
        cout << num << " " ;
    }
    
    cout << endl << "The SubSet: "; 
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num <<" " ;
        }
        cout << "||" ;
    }
    
    return 0;
}
Output: 
Sum Stored: 0 1 3 5 2 4 
The SubSet: ||||1 ||1 2 ||1 2 2 ||2 ||2 2 ||

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
// Palindromic Substring using recursions
bool isPalindrome(int start, int end, string s) {
    
    while(start <= end) {
        if(s[start] != s[end]) {
            return false ;
        }
        start++ ;
        end-- ;
    }
    return true ;
}

void partition(int ind, string s, vector<string> &ds, vector<vector<string>> &ans ) {
    
    if(ind == s.size()) {
        ans.push_back(ds) ;
        return ;
    }
    
    for(int i = ind; i < s.size(); i++ ) {
        if(isPalindrome(ind, i , s)) {
            ds.push_back(s.substr(ind, i - ind + 1)) ;
            partition(i+1, s, ds, ans) ;
            ds.pop_back() ;
        }
    }
}


int main() {
    // Write C++ code here
    string s = "aab" ;
    
    vector<vector<string>> ans ;
    vector<string> ds ;
    
    partition(0, s, ds, ans) ;
    
    cout << "Palindromic Substring are: " ;
    for(vector<string> nums : ans) {
        for(string ch : nums) {
            cout << ch << " || " ; 
        }
    }
    
    return 0;
}

Output: 
Palindromic Substring are: a || a || b || aa || b || 
______________________________________________________________________________________________________________________________________________________________________________________________________________
#include<bits/stdc++.h>
using namespace std;
// Permutations 
void genPermutation(vector<int> &arr, vector<int> &freq ,vector<int> &ds, vector<vector<int>> &ans) {
    
    if(ds.size() == arr.size()) {
        ans.push_back(ds) ;
        return ;
    }
    
    for(int i = 0 ; i < arr.size() ; i++) {
        if(!freq[i]) {
            freq[i] = 1 ;
            ds.push_back(arr[i]) ;
            
            genPermutation(arr, freq, ds, ans) ;
            
            ds.pop_back() ;
            freq[i] = 0 ;
        }
    }
    
}

int main() {
    
    vector<int> arr = {1, 2, 3} ;
    int n = arr.size() ;
    vector<int> ds ;
    vector<vector<int>> ans ;
    vector<int> freq(n, 0) ;
    
    genPermutation(arr,freq, ds, ans) ;
    
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num <<" " ;
        }
        cout << endl ;
    }
    
    return 0;
}

Output:
1 2 3 
1 3 2 
2 1 3 
2 3 1 
3 1 2 
3 2 1 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include<bits/stdc++.h>
using namespace std;
// Permutation using Swap Approach
void genPermutation(int ind, vector<int> &arr, vector<vector<int>> &ans) {
    
    if(ind == arr.size()) {
        ans.push_back(arr) ;
        return ;
    }
    
    for(int i = ind ; i < arr.size() ; i++) {
        
        swap(arr[i], arr[ind]) ;
            
        genPermutation(ind+1, arr, ans) ;
          
        swap(arr[i], arr[ind]); 
    }
    
}

int main() {
    
    vector<int> arr = {1, 2, 3} ;
    int n = arr.size() ;
    vector<int> ds ;
    vector<vector<int>> ans ;
    
    genPermutation(0, arr, ans) ;
    
    for(vector<int> nums : ans) {
        for(int num : nums) {
            cout << num <<" " ;
        }
        cout << endl ;
    }
    
    return 0;
}

Output: 
1 2 3 
1 3 2 
2 1 3 
2 3 1 
3 2 1 
3 1 2 
